#!/usr/bin/env python3
import glob
import os
import sys
import subprocess


def print_flush(s=""):
    print(s)
    sys.stdout.flush()


def main():
    num_pages = len(glob.glob("/dangerzone/page-*.rgb"))
    print_flush(f"Document has {num_pages} pages")

    # Convert RGB files to PDF files
    for page in range(1, num_pages + 1):
        filename_base = f"/dangerzone/page-{page}"
        rgb_filename = f"{filename_base}.rgb"
        width_filename = f"{filename_base}.width"
        height_filename = f"{filename_base}.height"
        png_filename = f"/tmp/page-{page}.png"
        ocr_filename = f"/tmp/page-{page}"
        pdf_filename = f"/tmp/page-{page}.pdf"

        with open(width_filename) as f:
            width = f.read().strip()
        with open(height_filename) as f:
            height = f.read().strip()

        if os.environ.get("OCR") == "1":
            # OCR the document
            print_flush(f"Converting page {page} from pixels to searchable PDF")

            args = [
                "convert",
                "-size",
                f"{width}x{height}",
                "-depth",
                "8",
                f"rgb:{rgb_filename}",
                f"png:{png_filename}",
            ]
            p = subprocess.run(args)
            if p.returncode != 0:
                print_flush(f"Page {page} conversion failed: {p.stdout}")
                sys.exit(1)

            args = [
                "tesseract",
                png_filename,
                ocr_filename,
                "pdf",
                "-l",
                os.environ.get("OCR_LANGUAGE"),
            ]
            p = subprocess.run(args)
            if p.returncode != 0:
                print_flush(f"Page {page} conversion failed: {p.stdout}")
                sys.exit(1)

        else:
            # Don't OCR
            print_flush(f"Converting page {page} from pixels to PDF")

            args = [
                "convert",
                "-size",
                f"{width}x{height}",
                "-depth",
                "8",
                f"rgb:{rgb_filename}",
                f"pdf:{pdf_filename}",
            ]
            p = subprocess.run(args)
            if p.returncode != 0:
                print_flush(f"Page {page} conversion failed: {p.stdout}")
                sys.exit(1)

    print_flush()

    # Merge pages into a single PDF
    print_flush(f"Merging {num_pages} pages into a single PDF")
    args = ["pdfunite"]
    for page in range(1, num_pages + 1):
        args.append(f"/tmp/page-{page}.pdf")
    args.append(f"/safezone/safe-output.pdf")
    p = subprocess.run(args)
    if p.returncode != 0:
        print_flush(f"Merge failed: {p.stdout}")
        sys.exit(1)

    # Compress
    print_flush("Compressing PDF")
    p = subprocess.run(
        ["ps2pdf", "/safezone/safe-output.pdf", "/safezone/safe-output-compressed.pdf"]
    )
    if p.returncode != 0:
        print_flush(f"Compression failed: {p.stdout}")
        sys.exit(1)


if __name__ == "__main__":
    main()
